// package githubauth uses github's device flow api to retrieve an oauth2 access token
// https://docs.github.com/en/developers/apps/authorizing-oauth-apps#device-flow
// Device flow was chosen so the app could still function without exposing or requiring configuration of the client secret
package githubauth

import (
	"bytes"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"os"

	"golang.org/x/oauth2"
)

// This clientid was generated by @therealplato, you're welcome to replace it with your own generated via
// https://github.com/settings/applications/new . Be sure to provide a valid callback URL. I registered
// http://localhost:2992/oauth2/callback
const clientID = "13691b85a3d64f794bb0"

// requiredScopes is space separated string of scopes as per https://docs.github.com/en/developers/apps/scopes-for-oauth-apps
var requiredScopes string = "repo:status"

// jsonHeaders is the http headers we'll use to ensure json request/response bodies
var jsonHeaders = http.Header{
	"Accept":       []string{"application/json"},
	"Content-Type": []string{"application/json"},
}

func MustAuthorize(logger io.Writer) *oauth2.Token {
	hreq := mustCraftDeviceVerificationCodeRequest(logger)

	hres, err := http.DefaultClient.Do(hreq)
	if err != nil {
		fmt.Fprintf(logger, "failed to perform device verification code request: %q\n", err)
		os.Exit(1)
	}
	res := &deviceVerificationCodeResponse{}
	err = json.NewDecoder(hres.Body).Decode(res)
	if err != nil {
		fmt.Fprintf(logger, "failed to decode device verification code response: %q\n", err)
		os.Exit(1)
	}
	fmt.Fprintf(logger, "received device verification code response: %#v\n", res)
	os.Exit(0)
	return nil
}

var deviceVerificationCodeURL = "https://github.com/login/device/code"

type deviceVerificationCodeRequest struct {
	// ClientID is this application's client id
	ClientID string `json:"client_id"`

	// Scope is space separated list
	Scope string `json:"scope"`
}

type deviceVerificationCodeResponse struct {
	// DeviceCode is our half of the challenge
	DeviceCode string `json:"device_code"`

	// UserCode is users half of the challenge
	UserCode string `json:"user_code"`

	// VerificationURI is where user enters UserCode
	VerificationURI string `json:"verification_uri"`

	// ExpiresIn is how long user has
	ExpiresIn int `json:"expires_in"`

	// Interval is seconds until rate limiting allows next request
	Interval int `json:"interval"`
}

func mustCraftDeviceVerificationCodeRequest(logger io.Writer) *http.Request {
	req := deviceVerificationCodeRequest{
		ClientID: clientID,
		Scope:    requiredScopes,
	}
	bb, err := json.Marshal(req)
	if err != nil {
		fmt.Fprintf(logger, "could not marshal device verification code request: %q\n", err)
		os.Exit(1)
	}
	buf := bytes.NewBuffer(bb)

	initialRequest, err := http.NewRequest(http.MethodPost, deviceVerificationCodeURL, buf)
	if err != nil {
		fmt.Fprintf(logger, "could not craft device verification code request: %q\n", err)
		os.Exit(1)
	}
	initialRequest.Header = jsonHeaders

	return initialRequest
}
